import spectrum_card as sc

# Create card
card = sc.Card()
card.reset()

print("")
print("Card identity:")
print("Device name:", card.get_name())
print("Serial number:", card.get_serial_number())
print("Series:", card.get_series_information())
print("Production date:", card.get_production_date_information())
print("Calibration date:", card.get_calibration_date_information())
print(f"Max sample rate: {card.get_max_sample_rate()/1e6} MHz")
print(f"Memory: {card.get_max_memory_size()/(2**30)} GiB")
print("Is demo:", card.get_is_demo_card() != 0)
print("Modifications:", card.get_modifications_information())

print("")
print("Card information:")
print("Front end modules:", card.get_number_of_front_end_modules())
print("Channels per front end module:", card.get_number_of_channels_per_front_end_module())
print(f"Resolution: {card.get_sample_resolution()} B = {card.get_sample_resolution_bits()} b")
print("ADC scale:", card.get_adc_full_scale())
print(f"External clock: {card.get_min_external_clock()/1e6} MHz to {card.get_max_external_clock()/1e6} MHz")
print(f"External reference clock: {card.get_min_external_reference_clock()/1e6} MHz to {card.get_max_external_reference_clock()/1e6} MHz")

print("")
print("Temperature:")
print(f"FPGA: {card.get_temperature_base()} degC")
print(f"Amplifier: {card.get_temperature_module_1()} degC")

print("")
print("Driver information:")
print("Driver:", card.get_driver_information())
print("Version:", card.get_driver_version_information())
print("Kernel version:", card.get_kernel_version_information())

print("")
print("Features and functions:")
print("Features:", card.get_features_information())
print("Functions:", card.get_functions_information())

print("")
print("Hardware versions:")
print("PCI version:", card.get_pci_information())
print("PCB version:", card.get_base_pcb_information())

print("")
print("Firmware versions:")
print("Control FPGA:", card.get_firmware_version_control_information())
print("Control FPGA golden:", card.get_firmware_version_control_golden_information())
print("Control FPGA active:", card.get_firmware_version_control_active_information())
print("Clock distribution:", card.get_firmware_version_clock_information())
print("Configuration controller:", card.get_firmware_version_configuration_information())
print("Front end module A:", card.get_firmware_version_module_a_information())
print("Front end module B:", card.get_firmware_version_module_b_information())
print("Star hub module:", card.get_firmware_version_module_star_information())
print("Power controller:", card.get_firmware_version_power_information())

print("")
print("Clock information:")
print("Available clock modes:", card.get_available_clock_modes())
print("Clock mode:", card.get_clock_mode_information())
print(f"Output frequency {card.get_clock_output_frequency()/1e6} MHz")
print(f"External reference frequency {card.get_external_reference_frequency()/1e6} MHz")

print("")
print("Channels etc:")
print(f"Sample rate: {card.get_sample_rate()/1e6} M samples/s")
print("Mode:", card.get_mode_information())
print("Available modes:", card.get_available_modes_information())
print("Enabled channels", card.get_channels_enable())

print("")
print("Triggers:")
print(f"Trigger delay: {card.get_trigger_delay()} Sa")
print(f"Maximum trigger delay: {card.get_max_trigger_delay()} Sa")
print("Trigger impedance:", card.get_trigger_impedance())
print("Trigger couplings:", card.get_trigger_coupling(0), ",", card.get_trigger_coupling(1))
print("Available trigger modes (Trigger 0):", card.get_available_trigger_modes_information(0))
print("Available trigger modes (Trigger 1):", card.get_available_trigger_modes_information(1))
print("Trigger modes:", card.get_trigger_mode_information(0), ",", card.get_trigger_mode_information(1))
print(f"Lower trigger thresholds from {card.get_lower_trigger_threshold_min()} V to {card.get_lower_trigger_threshold_max()} V in steps of {card.get_lower_trigger_threshold_step()} V")
print(f"Upper trigger thresholds from {card.get_upper_trigger_threshold_min()} V to {card.get_upper_trigger_threshold_max()} V in steps of {card.get_upper_trigger_threshold_step()} V")
print(f"Trigger 0 lower: {card.get_lower_trigger_threshold(0):.2f} V, upper: {card.get_upper_trigger_threshold(0):.2f} V.")
print(f"Trigger 1 lower: {card.get_lower_trigger_threshold(1):.2f} V, upper: {card.get_upper_trigger_threshold(1):.2f} V.")

print("")
print("Trigger masks:")
print(f"Number of active channels: {card.get_number_of_active_channels()}")
print(f"Sample resolution: {card.get_sample_resolution()} B")
print("Available sufficient triggers:", card.get_available_sufficient_triggers())
print("Sufficient triggers:", card.get_sufficient_triggers())
print("Available channels for sufficient triggers:", card.get_available_channels_for_sufficient_triggers())
print("Channels for sufficient triggers:", card.get_channels_for_sufficient_triggers())
print("Available necessary triggers:", card.get_available_necessary_triggers())
print("Necessary triggers:", card.get_necessary_triggers())
print("Available channels for necessary triggers:", card.get_available_channels_for_necessary_triggers())
print("Channels for necessary triggers:", card.get_channels_for_necessary_triggers())

print("")
print("Sequencing:")
print("Max number of segments:", card.get_max_number_of_segments())
print("Max number of loops per step:", card.get_max_number_of_loops_per_sequence_step())
print("Max number of steps:", card.get_max_number_of_sequence_steps())

print("")
print("IO:")
print("X0 available modes:", card.get_available_io_modes_information(0))
print("X1 available modes:", card.get_available_io_modes_information(1))
print("X2 available modes:", card.get_available_io_modes_information(2))
print("X0 mode:", card.get_io_mode_information(0))
print("X1 mode:", card.get_io_mode_information(1))
print("X2 mode:", card.get_io_mode_information(2))
print("X0:", card.get_io_asynchronous(0))
print("X1:", card.get_io_asynchronous(1))
print("X2:", card.get_io_asynchronous(2))

card.close()